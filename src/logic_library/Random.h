// Author: Maksim Karnaukh
// Implemented as a singleton class.
// Sources:
// https://stackoverflow.com/questions/13445688/how-to-generate-a-random-number-in-c
// https://stackoverflow.com/questions/7114043/random-number-generation-in-c11-how-to-generate-how-does-it-work
// https://en.cppreference.com/w/cpp/numeric/random

#ifndef DOODLEJUMP_RANDOM_H
#define DOODLEJUMP_RANDOM_H

#include <random>

namespace logic {
namespace utility {

class Random
{

        std::random_device rd;     // seed
        std::mt19937 randomEngine; // mersenne_twister_engine (seeded with randomDevice())

        /**
         * @function : Random
         * Constructor for a Random.
         */
        Random();

        /**
         * @function : Random
         * Destructor for a Random.
         */
        ~Random();

public:
        Random(const Random&) = delete;
        Random(const Random&&) = delete;

        Random& operator=(const Random&) = delete;
        Random& operator=(const Random&&) = delete;

public:
        static Random& Instance();

        // Uniform distributions

        /**
         * @function : uniformIntDistribution
         * Returns a value generated by a uniform integer distribution.
         * @param a (int) : left range.
         * @param b (int) : right range.
         * @return (int) : random integer in the range between a and b.
         */
        int uniformIntDistribution(int a, int b);

        /**
         * @function : uniformRealDistribution
         * Returns a value generated by a uniform real distribution.
         * @param a (float) : left range.
         * @param b (float) : right range.
         * @return (float) : random float in the range between a and b.
         */
        float uniformRealDistribution(float a, float b);

        // Bernoulli distributions

        /**
         * @function : uniformRealDistribution
         * Returns a value generated by a bernoulli distribution.
         * @param p (float) : .
         * @return (bool) : true or false.
         */
        bool bernoulliDistribution(float p);

        /**
         * @function : binomialDistribution
         * Returns a value generated by a binomial distribution.
         * @param p (float) : .
         * @param t (int) : .
         * @return (int) :
         */
        int binomialDistribution(float p, int t);

        /**
         * @function : negativeBinomialDistribution
         * Returns a value generated by a negative binomial distribution.
         * @param p (float) : .
         * @param t (int) : .
         * @return (int) : .
         */
        int negativeBinomialDistribution(float p, int k);

        /**
         * @function : geometricDistribution
         * Returns a value generated by a geometric distribution.
         * @param p (float) : .
         * @return (int) : .
         */
        int geometricDistribution(float p);

        // Poisson distributions

        /**
         * @function : poissonDistribution
         * Returns a value generated by a poisson distribution.
         * @param mean (float) : .
         * @return (int) : .
         */
        int poissonDistribution(float mean);

        /**
         * @function : exponentialDistribution
         * Returns a value generated by an exponential distribution.
         * @param lambda (float) : .
         * @return (float) : .
         */
        float exponentialDistribution(float lambda);

        /**
         * @function : gammaDistribution
         * Returns a value generated by a gamma distribution.
         * @param alpha (float) : .
         * @param beta (float) : .
         * @return (float) : .
         */
        float gammaDistribution(float alpha, float beta);

        /**
         * @function : weibullDistribution
         * Returns a value generated by a weibull distribution.
         * @param a (float) : .
         * @param b (float) : .
         * @return (float) : .
         */
        float weibullDistribution(float a, float b);

        /**
         * @function : extremeValueDistribution
         * Returns a value generated by an extreme value distribution.
         * @param a (float) : .
         * @param b (float) : .
         * @return (float) : .
         */
        float extremeValueDistribution(float a, float b);

        // Normal distributions

        /**
         * @function : normalDistribution
         * Returns a value generated by a normal distribution.
         * @param mean (float) : .
         * @param stddev (float) : .
         * @return (float) : .
         */
        float normalDistribution(float mean, float stddev);

        /**
         * @function : lognormalDistribution
         * Returns a value generated by a lognormal distribution.
         * @param m (float) : .
         * @param s (float) : .
         * @return (float) : .
         */
        float lognormalDistribution(float m, float s);

        /**
         * @function : cauchyDistribution
         * Returns a value generated by a cauchy distribution.
         * @param a (float) : .
         * @param b (float) : .
         * @return (float) : .
         */
        float cauchyDistribution(float a, float b);

        // Sampling distributions

        /**
         * @function : discreteDistribution
         * Returns a value generated by a discrete distribution.
         * @param probabilities (std::initializer_list<double>) : list of probabilities.
         * @return (int) : .
         */
        int discreteDistribution(const std::initializer_list<double>& probabilities);

        // https://www.boost.org/doc/libs/1_75_0/doc/html/boost/random/piecew_1_3_35_5_6_31_1_1_1.html
        /**
         * @function : piecewiseConstantDistribution
         * Returns a value generated by a piecewise constant distribution.
         * @param intervals (std::vector<float>) : list of the intervals.
         * @param densities (std::vector<float>) : list of the densities (for the intervals).
         * @return (float) : random float from between one of the ranges in the intervals.
         */
        float piecewiseConstantDistribution(const std::vector<float>& intervals, const std::vector<float>& densities);

        // https://www.boost.org/doc/libs/1_75_0/doc/html/boost/random/piecew_1_3_35_5_6_32_1_1_1.html
        /**
         * @function : piecewiseLineairDistribution
         * Returns a value generated by a piecewise lineair distribution.
         * @param intervals (std::vector<float>) : list of the intervals.
         * @param densities (std::vector<float>) : list of the densities (for the intervals).
         * @return (float) : random float from between one of the ranges in the intervals.
         */
        float piecewiseLineairDistribution(const std::vector<float>& intervals, const std::vector<float>& densities);
};
} // namespace utility
} // namespace logic

#endif // DOODLEJUMP_RANDOM_H
